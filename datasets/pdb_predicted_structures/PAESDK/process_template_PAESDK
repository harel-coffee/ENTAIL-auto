#!/usr/bin/perl -w
use strict;


my $s="PAESDK"; # target id
my $datadir="/media/stefano/DISCO1/FOLDEN/trRosetta2/example/PAESDK"; # for seq.fasta; temp.npz is also here 
my $fasta="/media/stefano/DISCO1/FOLDEN/trRosetta2/example/PAESDK/seq.fasta"; # fasta file
my $hhout="/media/stefano/DISCO1/FOLDEN/trRosetta2/example/PAESDK/protein.out"; # HHsearch out file
my $temp_npz="/media/stefano/DISCO1/FOLDEN/trRosetta2/example/PAESDK/PAESDK.homo.npz"; # out templates npz file
my $ntemp="10"; # number of templates to use
my $onlygood="1"; # 1-only use good templates;0-use all topN templates
my $bindir="/media/stefano/DISCO1/FOLDEN/trRosettaX/trRosettaX/trRosettaX/bin"; # tr2 bin
my $pdbdb="/media/stefano/DISCO1/FOLDEN/trRosettaX/db_20211124"; # hhsearch pdb db
my $python="/usr/bin/python3.6"; # python script path


print "Preprocessing \n\n";
&run_hhsearch();
print "HHSearch done \n\n";

while(1)
{
	print "Waiting for initHPP \n\n";

	my $hhdone=1;
	if(!-e "$datadir/init.HHP")
	{
		$hhdone=0;
	}
	if($hhdone==0)
	{
		sleep(10);
	}
	if(-e "$datadir/fail.hmm")
	{
		print("Homology fails");
		$hhdone=1;
		last;
	}

	else
	{
		printf "Preprocessing has been done!\n\n";
		last;
	}
}

print "Launching Template NPZ \n\n";
&template_npz();
print "Template NPZ done\n\n";



sub run_hhsearch{

	my $jobname=$s;
	my $outdir=$datadir;
	my $tag="HH\_$jobname";
	my $idcut="1";
	my $target_date="40400101";

	
	print "Launching initHPP \n\n";

	return if(-s "$outdir/init.HHP");

	print "Launching initHPP OK \n\n";

	my $err="$outdir/err_$tag";
	my $out="$outdir/out_$tag";

	my $mod	=`cat $bindir/HHPmod`;
	$mod	=~ s/\!S\!/$jobname/mg;
	$mod	=~ s/\!TAG\!/$tag/mg;
	$mod	=~ s/\!ID_CUT\!/$idcut/mg;
	$mod	=~ s/\!N_TEMP\!/$ntemp/mg;
	$mod	=~ s/\!DATA_DIR\!/$outdir/mg;
	$mod	=~ s/\!PDB_DB\!/$pdbdb/mg;
	$mod	=~ s/\!FASTA\!/$fasta/mg;
	$mod	=~ s/\!HH_OUT\!/$hhout/mg;

	my $prog="$outdir/$tag.pl";
	open(OUT, ">$prog");
	print OUT "$mod";
	close(OUT);

	print "Prog is $prog \n\n";

	my $walltime="walltime=48:00:00";
	`chmod 700 $prog`;
	if(!-e "$outdir/protein.out"){
		`cp $hhout $outdir/protein.out`;
	}
	`$prog 1>$out 2>$err &`;
	print "$tag submitted\n\n";
	print "HPP completed \n\n";

}
sub good_templates
{
	my @good_t=();
	my $n=0;
	open FILE, "$datadir/init.info";
	while(my $line=<FILE>)
	{
		chomp($line);
		next if($line=~/target/);
		my @row=split(/\s+/,$line);
		$n++;
		if (($onlygood<1) || ($row[-3]>60 && $row[-1]<0.001 && $row[-2]>0.3))
		{
			push(@good_t, $line);
		}
	}
	close FILE;
	return (\@good_t, $n);
}
sub seq_id
{
	my ($template)=@_;

	my $qlen=0;
	my $tlen=0;
	my $id=0;
	
	my $align_rst=`$bindir/align $datadir/seq.fasta $pdbdb/$template.pdb 2`;
	if($align_rst=~/Identical length\:\s+(\d+)/)
	{
	$id=$1;
	}
	if($align_rst=~/Length of sequence 2\:\s+(\d+)/)
	{
		$tlen=$1;
	}
	if($align_rst=~/Length of sequence 1\:\s+(\d+)/)
	{
		$qlen=$1;
	}


	my $nlen=$qlen;
	$nlen=$tlen if($qlen>$tlen);

	my $seqid=100*$id/$nlen;
	$seqid = sprintf("%.1f", $seqid);

	return $seqid;
}
sub template_npz
{
	print ("check the quality of template\n");
	return 1 if(-s "$datadir/temp.npz");
	my $dir1="$datadir/template";
	`mkdir -p $dir1`;
	chdir "$dir1";
	
	`cp $datadir/init.HHP .`;
	`cp $datadir/init.info .`;
	`cp $datadir/seq.fasta .`;
	`cp $datadir/$s.out .`;
	
	my $flag=1;
	
	my ($good_t_ref, $topn)=&good_templates();
	my @good_t=@$good_t_ref;
	
	my $n_temp=@good_t;
	
	my %idx=();
	if(@good_t)
	{
		my $n_good=@good_t;
		printf "%d templates will be used\n",$n_good;
		open OUTFILE, ">$datadir/good_temp.txt";
		printf OUTFILE "%6s %5s %5s %7s %6s %6s %7s %s\n", "target", "N_good", "N_temp", "z-score", "t_prob", "cov", "E-value", "SeqID";
		foreach my $temp(@good_t)
		{
			my $tname="";
			my $seqid=0;
			if($temp =~ /^(\S+)\s+/)
			{
				$tname=$1;
				$seqid=&seq_id($tname);
			}
			print OUTFILE "$temp $seqid\n";
			my @a=split(/\s+/, $temp);
			$idx{$a[1]}=1;
		}
		close OUTFILE;
		printf "\nGenerating temp.npz...\n";
		
		printf "step1: generating alignment file\n";
		my $k=1;
		for(my $i=0; $i<20; $i++)
		{
			my $j=$i+1;
			`$bindir/splitinit.pl init.HHP $i thdalign$i.pdb`;
			`$bindir/init_alignT.pl thdalign$i.pdb seq.fasta 1 $dir1 $pdbdb`;
			
			`mv alignment.ali alignment$j.ali`;
			`rm -f pdb1.atm _tmp.lst`;
		}
		printf "step2: computing temp.npz generated by top %d templates\n\n", $n_good;
		`$python $bindir/get_temp_npz.py $dir1 $s $topn $temp_npz`;
		die "templates npz missed\n" if(!-s $temp_npz);
	}
	else
	{
		printf "no good template has been found\n";
		$flag=0;
	}
	return $flag;
}
